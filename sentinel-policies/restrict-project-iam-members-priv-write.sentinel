import "tfplan"
# Modules from https://github.com/hashicorp/terraform-guides/blob/master/governance/third-generation/common-functions/tfplan-functions/tfplan-functions.sentinel
import "tfplan-functions" as plan

iamMember = plan.find_resources("google_project_iam_member")

# denied_roles_list contains roles that should not be allowed to 
denied_roles_list = [
    "roles/owner",
    "roles/editor",
    "roles/iam.securityAdmin",
    "roles/iam.serviceAccountAdmin",
    "roles/iam.serviceAccountKeyAdmin",
    "roles/iam.serviceAccountUser",
    "roles/iam.serviceAccountTokenCreator",
    "roles/iam.workloadIdentityUser",
    "roles/dataproc.editor",
    "roles/dataproc.admin",
    "roles/dataflow.developer",
    "roles/resourcemanager.folderAdmin",
    "roles/resourcemanager.folderIamAdmin",
    "roles/resourcemanager.projectIamAdmin",
    "roles/resourcemanager.organizationAdmin",
    "roles/serverless.serviceAgent",
    "roles/dataproc.serviceAgent",
]

violatingIamBinding = plan.filter_attribute_in_list(iamMember,
                        "role", denied_roles_list, true)
                        
# Check if the default App Engine and Compute service accounts are defined as members. 
# Default Compute -compute@developer.gserviceaccount.com
# Default App Spot @appspot.gserviceaccount.com
#(-compute@developer\\.gserviceaccount\\.com|@appspot\\.gserviceaccount\\.com)
default_sa_regex = "^group:.*_priv_write@hca\\.corpad\\.net$"

violatingSa = plan.filter_attribute_matches_regex(iamMember,
                        "member", default_sa_regex, true)


# Main rule
main = rule {
  violatingSa is 0 and
  violatingIamBinding is 0 
}