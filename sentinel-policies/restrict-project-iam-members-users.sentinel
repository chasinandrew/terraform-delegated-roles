import "tfplan"
# Modules from https://github.com/hashicorp/terraform-guides/blob/master/governance/third-generation/common-functions/tfplan-functions/tfplan-functions.sentinel
import "tfplan-functions" as plan

iamMember = plan.find_resources("google_project_iam_member")

# denied_roles_list contains roles that should not be allowed to be granted to users directly. 
denied_roles_list = [
"roles/artifactregistry.admin",
"roles/artifactregistry.reader",
"roles/artifactregistry.repoAdmin",
"roles/artifactregistry.writer",
"roles/automl.admin",
"roles/automl.editor",
"roles/automl.predictor",
"roles/automl.viewer",
"roles/automlrecommendations.admin",
"roles/automlrecommendations.adminViewer",
"roles/automlrecommendations.editor",
"roles/automlrecommendations.viewer",
"roles/bigquery.admin",
"roles/bigquery.connectionAdmin",
"roles/bigquery.connectionUser",
"roles/bigquery.dataEditor",
"roles/bigquery.dataOwner",
"roles/bigquery.dataViewer",
"roles/bigquery.filteredDataViewer",
"roles/bigquery.jobUser",
"roles/bigquery.metadataViewer",
"roles/bigquery.readSessionUser",
"roles/bigquery.resourceAdmin",
"roles/bigquery.resourceEditor",
"roles/bigquery.resourceViewer",
"roles/bigquery.user",
"roles/bigquerydatapolicy.maskedReader",
"roles/bigquerymigration.editor",
"roles/bigquerymigration.orchestrator",
"roles/bigquerymigration.translationUser",
"roles/bigquerymigration.viewer",
"roles/bigquerymigration.worker",
"roles/bigquery.admin",
"roles/bigquery.user",
"roles/bigtable.admin",
"roles/bigtable.reader",
"roles/bigtable.user",
"roles/bigtable.viewer",
"roles/binaryauthorization.attestorsAdmin",
"roles/binaryauthorization.attestorsEditor",
"roles/binaryauthorization.attestorsVerifier",
"roles/binaryauthorization.attestorsViewer",
"roles/binaryauthorization.policyAdmin",
"roles/binaryauthorization.policyEditor",
"roles/binaryauthorization.policyEvaluator",
"roles/binaryauthorization.policyViewer",
"roles/cloudasset.owner",
"roles/cloudasset.viewer",
"roles/cloudbuild.builds.approver",
"roles/cloudbuild.builds.editor",
"roles/cloudbuild.builds.viewer",
"roles/cloudbuild.integrationsEditor",
"roles/cloudbuild.integrationsOwner",
"roles/cloudbuild.integrationsViewer",
"roles/cloudbuild.workerPoolEditor",
"roles/cloudbuild.workerPoolOwner",
"roles/cloudbuild.workerPoolUser",
"roles/cloudbuild.workerPoolViewer",
"roles/composer.admin",
"roles/composer.environmentAndStorageObjectAdmin",
"roles/composer.environmentAndStorageObjectViewer",
"roles/composer.user",
"roles/composer.worker",
"roles/cloudfunctions.admin",
"roles/cloudfunctions.developer",
"roles/cloudfunctions.invoker",
"roles/cloudfunctions.viewer",
"roles/cloudkms.admin",
"roles/lifesciences.admin",
"roles/lifesciences.editor",
"roles/lifesciences.viewer",
"roles/lifesciences.workflowsRunner",
"roles/run.admin",
"roles/run.developer",
"roles/run.invoker",
"roles/run.viewer",
"roles/cloudscheduler.admin",
"roles/cloudscheduler.jobRunner",
"roles/cloudscheduler.viewer",
"roles/cloudsql.admin",
"roles/cloudsql.client",
"roles/cloudsql.editor",
"roles/cloudsql.instanceUser",
"roles/cloudsql.viewer",
"roles/storage.admin",
"roles/storage.objectAdmin",
"roles/storage.objectCreator",
"roles/storage.objectViewer",
"roles/storagetransfer.admin",
"roles/storagetransfer.transferAgent",
"roles/storagetransfer.user",
"roles/storagetransfer.viewer",
"roles/cloudtasks.admin",
"roles/cloudtasks.enqueuer",
"roles/cloudtasks.queueAdmin",
"roles/cloudtasks.taskDeleter",
"roles/cloudtasks.taskRunner",
"roles/cloudtasks.viewer",
"roles/tpu.admin",
"roles/tpu.viewer",
"roles/cloudtranslate.admin",
"roles/cloudtranslate.editor",
"roles/cloudtranslate.user",
"roles/cloudtranslate.viewer",
"roles/containeranalysis.admin",
"roles/containeranalysis.notes.attacher",
"roles/containeranalysis.notes.editor",
"roles/containeranalysis.notes.occurrences.viewer",
"roles/containeranalysis.notes.viewer",
"roles/containeranalysis.occurrences.editor",
"roles/containeranalysis.occurrences.viewer",
"roles/containersecurity.viewer",
"roles/datapipelines.admin",
"roles/datapipelines.invoker",
"roles/datapipelines.viewer",
"roles/dataflow.admin",
"roles/dataflow.developer",
"roles/dataflow.viewer",
"roles/dataflow.worker",
"roles/dataproc.admin",
"roles/dataproc.editor",
"roles/dataproc.hubAgent",
"roles/dataproc.viewer",
"roles/dataproc.worker",
"roles/metastore.admin",
"roles/metastore.editor",
"roles/metastore.federationAccessor",
"roles/metastore.metadataEditor",
"roles/metastore.metadataOperator",
"roles/metastore.metadataOwner",
"roles/metastore.metadataUser",
"roles/metastore.metadataViewer",
"roles/metastore.user",
"roles/datastore.owner",
"roles/datastore.user",
"roles/datastore.viewer",
"roles/eventarc.admin",
"roles/eventarc.connectionPublisher",
"roles/eventarc.developer",
"roles/eventarc.eventReceiver",
"roles/eventarc.publisher",
"roles/eventarc.viewer",
"roles/logging.admin",
"roles/logging.bucketWriter",
"roles/logging.configWriter",
"roles/logging.fieldAccessor",
"roles/logging.logWriter",
"roles/logging.privateLogViewer",
"roles/logging.viewAccessor",
"roles/logging.viewer",
"roles/memcache.admin",
"roles/memcache.editor",
"roles/memcache.viewer",
"roles/redis.admin",
"roles/redis.editor",
"roles/redis.viewer",
"roles/meshconfig.admin",
"roles/meshconfig.viewer",
"roles/monitoring.admin",
"roles/monitoring.alertPolicyEditor",
"roles/monitoring.alertPolicyViewer",
"roles/monitoring.dashboardEditor",
"roles/monitoring.dashboardViewer",
"roles/monitoring.editor",
"roles/monitoring.metricsScopesAdmin",
"roles/monitoring.metricsScopesViewer",
"roles/monitoring.metricWriter",
"roles/monitoring.notificationChannelEditor",
"roles/monitoring.notificationChannelViewer",
"roles/monitoring.servicesEditor",
"roles/monitoring.servicesViewer",
"roles/monitoring.uptimeCheckConfigEditor",
"roles/monitoring.uptimeCheckConfigViewer",
"roles/monitoring.viewer",
"roles/pubsub.admin",
"roles/pubsub.editor",
"roles/pubsub.publisher",
"roles/pubsub.subscriber",
"roles/pubsub.viewer",
"roles/secretmanager.admin",
"roles/secretmanager.secretAccessor",
"roles/secretmanager.secretVersionAdder",
"roles/secretmanager.secretVersionManager",
"roles/secretmanager.viewer",
"roles/vpcaccess.admin",
"roles/vpcaccess.user",
"roles/vpcaccess.viewer",
"roles/spanner.admin",
"roles/spanner.backupAdmin",
"roles/spanner.backupWriter",
"roles/spanner.databaseAdmin",
"roles/spanner.databaseReader",
"roles/spanner.databaseUser",
"roles/spanner.restoreAdmin",
"roles/spanner.viewer",
"roles/aiplatform.admin",
"roles/aiplatform.entityTypeOwner",
"roles/aiplatform.featurestoreAdmin",
"roles/aiplatform.featurestoreDataViewer",
"roles/aiplatform.featurestoreDataWriter",
"roles/aiplatform.featurestoreInstanceCreator",
"roles/aiplatform.featurestoreResourceViewer",
"roles/aiplatform.migrator",
"roles/aiplatform.tensorboardWebAppUser",
"roles/aiplatform.user",
"roles/aiplatform.viewer",
"roles/notebooks.admin",
"roles/notebooks.runner",
"roles/notebooks.viewer"
]

violatingIamBinding = plan.filter_attribute_in_list(iamMember,"role", denied_roles_list, true)
default_user_regex = "^user:.*"
violatingUser = plan.filter_attribute_matches_regex(iamMember,"member", default_user_regex, true)

main = rule {
  violatingUser is 0 and
  violatingIamBinding is 0 
}